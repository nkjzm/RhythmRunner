using UnityEngine;
using System.Collections;

public class StageGenerator : MonoBehaviour {
		// ===== Constant

		private SceneManager scene;

		// private:
		private enum _eMapchipType : int {	// Mapchip type
				CONTAINER,

				MAX_NUM
		};

		// Stage map ... 0 = None mapchip
		private int[][,] STAGE_MAP = new int[(int)SceneManager.STAGE.STAGE_MAX][,] {
				// Stage 1 - 1
				new int[,] {
						{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
						{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
						{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
						{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
						{ 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 	1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 	1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 	0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 	0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 	0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
						{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
				},
				// Stage 1 - 2
				new int[,] {
						{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
						{ 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 	0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
						{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
						{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
						{ 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 	1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 	1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 	0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 	0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 	0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
						{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
				},
				// Stage 1 - 3
				new int[,] {
						{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
						{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
						{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
						{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
						{ 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 	1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 	1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 	0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 	0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 	0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
						{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
				},
		};

		private float	MAPCHIP_SIZE	= 1.0f;	// Mapchip width and height size

		// ===== Arguments
		// publc:
		public GameObject[] mapchipPrefabList = new GameObject[(int)_eMapchipType.MAX_NUM];

		public Vector2 stageMargin;		// Appear position margin

		// ===== Function

		// Test
		void Start() {

				scene = GameObject.Find ("SceneManager").GetComponent<SceneManager> ();
				// Test

				GenerationStage (scene.stage);
		}

		// public:
		public GameObject[,] GenerationStage(SceneManager.STAGE stageNum) {
				int width	= STAGE_MAP[(int)stageNum].GetLength (1);	// Mapchip width num
				int height	= STAGE_MAP[(int)stageNum].GetLength (0);	// Mapchip height num
				GameObject[,] stage = new GameObject [height, width];	// Stage data

				for (int i = 0; i < width; ++i) {
						for(int j = 0; j < height; ++j) {
								int type = STAGE_MAP[(int)stageNum][j, i];	// Mapchip type

								// 0 = None mapchip
								if(type == 0) {
										stage[j, i] = null;
										continue;
								}

								// Adjust type
								--type;

								Vector3 pos = transform.position;	// Instantiate position
								pos.x += MAPCHIP_SIZE * i;			// Adjust position X
								pos.y -= MAPCHIP_SIZE * j;			// Adjust position Y
								pos.x += stageMargin.x;				// Add appear position margin X
								pos.y += stageMargin.y;				// Add appear position margin Y

								stage[j, i] = (GameObject)Instantiate(mapchipPrefabList[type], pos, transform.rotation);	// Instantiate mapchip
								stage[j, i].transform.parent = transform;		// Set mapchip parent
						}
				}

				return stage;
		}
}
